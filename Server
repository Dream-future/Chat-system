服务器
public class ChatRoomServer {
	private ServerSocket ss;
	private Set<Socket> allSockets;//实现群发功能 创建set集合用于储存所有的socket实例化对象
	public ChatRoomServer() {
		try {
			ss=new ServerSocket(1234);
			allSockets=new HashSet<Socket>();//对集合进行初始化
		} catch (IOException e) {
		
			e.printStackTrace();
		}
		
	}
	
	public void init() throws IOException{
		while(true) {
			System.out.println("服务器启动");
			Socket s=ss.accept();
			allSockets.add(s);//获取每个客户端的连接
			System.out.println("服务器与一个客户端已连接！");
			new ServerThread(s).start();
		}
	}
	//负责某个客户端通信
	class ServerThread extends Thread{
		private Socket s;
		private BufferedReader br;
		
		//构造成员方法 对Socket 进行初始化
		public ServerThread(Socket s) {
			this.s=s;
			try {
				br=new BufferedReader(new InputStreamReader(s.getInputStream()));
			} catch (IOException e) {
			
				e.printStackTrace();
			}
		}
		@Override
		//调用方法
		public void run() {
			
			while(true) {
				//Date d=new Date();
				//实现读取发送消息的功能
				try {
					String str=br.readLine();
					//
					if(str.indexOf("%EXIT%")==0) {
						//从集合中删除 scoket
						allSockets.remove(s);
						s.close();
						//split 将获取到的信息进行分割
						sendMessageToAllClient(str.split(":")[1]+"退出了");
						//结束while 循环
						break;
					}
				
					sendMessageToAllClient(str);
					//创建输出流
//					PrintWriter
					
					// pw=new PrintWriter(s.getOutputStream());
//					
//					pw.println(str+"\t["+d+"]");
//					pw.flush();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
			}
			
		}
		//实现群发功能
		private void sendMessageToAllClient(String mesg) {
			Date d=new Date();
			//遍利所有的socket对象
			for(Socket s : allSockets) {
				PrintWriter pw;
				try {
					pw = new PrintWriter(s.getOutputStream());
					pw.println(mesg+"\t["+d+"]");
					pw.flush();
				} catch (IOException e) {
				
					e.printStackTrace();
				}
				
				
			}
		}
	}
	public static void main(String[] args) throws IOException {
		ChatRoomServer c=new ChatRoomServer();
		c.init();
	}
}
